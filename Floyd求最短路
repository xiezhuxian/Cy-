#include<iostream>
#include<algorithm>
using namespace std;
const int N=1000;
int n,m,k;
int d[N][N];
int inf=1e9;
void floyd()
{
    for(int k=1;k<=n;k++)
    {
        for(int i=1;i<=n;i++)
        {
            for(int j=1;j<=n;j++)
            {
                d[i][j]=min(d[i][j],d[i][k]+d[k][j]);
            }
        }
    }
}
int main()
{
    ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    cin >> n >> m >> k;
    for(int i=1;i<=n;i++)
    {
        for(int j=1;j<=n;j++)
        {
            if(i==j)
            {
                d[i][j]=0;
            }
            else
            {
                d[i][j]=inf;
            }
        }
    }
    while(m--)
    {
        int x,y,z;
        cin >> x >> y >> z;
        d[x][y]=min(d[x][y],z);
    }
    floyd();
    while(k--)
    {
        int x,y;
        cin >> x >> y;
        if(d[x][y]>(inf/2))
        {
            cout << "impossible" << "\n";
        }
        else
        {
            cout << d[x][y] << "\n";
        }
    }
    return 0;
}

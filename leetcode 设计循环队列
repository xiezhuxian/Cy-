typedef int QDataType;
typedef struct {
    QDataType* data; // 存储有效数据
    int front;       // 头指针
    int rear;        // 尾指针
    int maxsize;     // 队列有效数据的个数
    int msg;
} MyCircularQueue;

MyCircularQueue* myCircularQueueCreate(int k) {
    MyCircularQueue* pq = (MyCircularQueue*)malloc(sizeof(MyCircularQueue));
    QDataType* tmp = (QDataType*)malloc(k * sizeof(QDataType));
    if (tmp == NULL) {
        perror("malloc fail!");
        exit(1);
    }
    pq->data = tmp;
    pq->front = pq->rear = 0;
    pq->maxsize = k;
    pq->msg = 0;
    return pq;
}
bool myCircularQueueIsEmpty(MyCircularQueue* obj) {
    return obj->front == obj->rear && obj->msg == 0;
}

bool myCircularQueueIsFull(MyCircularQueue* obj) {
    return obj->front == obj->rear && obj->msg == 1;
}
bool myCircularQueueEnQueue(MyCircularQueue* obj, int value) {
    assert(obj);
    if(myCircularQueueIsFull(obj))
    {
        return false;
    }
    obj->data[obj->rear] = value;
    obj->rear = (obj->rear + 1) % obj->maxsize;
    obj->msg = 1;
    return true;
}


bool myCircularQueueDeQueue(MyCircularQueue* obj) {
    if(myCircularQueueIsEmpty(obj))
    {
        return false;
    }
    obj->front = (obj->front + 1) % obj->maxsize;
    obj->msg = 0;
    return true;
}

int myCircularQueueFront(MyCircularQueue* obj) {
    if(myCircularQueueIsEmpty(obj))
    {
        return -1;
    }
    else
    {
        return obj->data[obj->front];
    }
}

int myCircularQueueRear(MyCircularQueue* obj) {
    if(myCircularQueueIsEmpty(obj))
    {
        return -1;
    }
    int x=obj->rear-1;
    if(obj->rear==0)
    {
        x=obj->maxsize-1;
    }
    return obj->data[x];
}


void myCircularQueueFree(MyCircularQueue* obj) {
    free(obj->data);
    obj->front = obj->rear = obj->maxsize = 0;
}

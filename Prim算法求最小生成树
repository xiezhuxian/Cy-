#include<iostream>
#include<algorithm>
#include<cstring>
#include<queue>
using namespace std;
typedef long long ll;
const int N=1e6+10;
int e[N],ne[N],idx,h[N],w[N];
int d[N];
int vis[N];
int n,m;
ll ans;
int cnt=0;
priority_queue<pair<int,int>> q;
void add(int a,int b,int c)
{
    e[idx]=b;
    w[idx]=c;
    ne[idx]=h[a];
    h[a]=idx++;
}
bool prim(int s)
{
    for(int i=0;i<=n;i++)
    {
        d[i]=1e9;
    }
    d[s]=0;
    q.push({0,s});
    while(q.size())
    {
        int u=q.top().second;
        q.pop();
        if(vis[u]) continue;
        vis[u]=1;
        ans+=d[u];
        if(d[u]!=1e9)
        {
            cnt++;
        }
        for(int i=h[u];i!=-1;i=ne[i])
        {
            int e1=e[i];
            int w1=w[i];
            if(d[e1]>w1)
            {
                d[e1]=w1;
                q.push({-d[e1],e1});
            }
        }
    }
    return cnt==n;
}
int main()
{
    ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    memset(h,-1,sizeof h);
    cin >> n >> m;
    for(int i=0;i<m;i++)
    {
        int a,b,c;
        cin >> a >> b >> c;
        add(a,b,c);
        add(b,a,c);
    }
    if(prim(1))
    {
        cout << ans << "\n";
    }
    else
    {
        cout << "impossible" << "\n";
    }
    return 0;
}



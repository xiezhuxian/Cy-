#include<iostream>
#include<algorithm>
#include<cstring>
using namespace std;
const int N=1e6;
struct edge{
    int v,u,w;
}e[N];
int fa[N],n,m;
long long ans=0;
int cnt;
bool cmp(edge a,edge b)
{
    return a.w<b.w;
}
int find(int x)
{
    if(fa[x]==x) return x;
    else
    {
        return fa[x]=find(fa[x]);
    }
}
bool kruskal()
{
    sort(e,e+m,cmp);
    for(int i=1;i<=n;i++)
    {
        fa[i]=i;
    }
    for(int i=0;i<m;i++)
    {
        int x=find(e[i].v);
        int y=find(e[i].u);
        if(x!=y)
        {
            fa[x]=y;
            ans+=e[i].w;
            cnt++;
        }
    }
    return cnt==n-1;
}
int main(){
    ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    cin >> n >> m;
    for(int i=0;i<m;i++)
    {
        int a,b,c;
        cin >> a >> b >> c;
        e[i].v=a;
        e[i].u=b;
        e[i].w=c;
    }
    if(kruskal())
    {
        cout << ans << "\n";
    }
    else
    {
        cout << "impossible" << "\n";
    }
    return 0;
}
